/////////////////////////////////////////////////////////////////////////////
// ARGSS - Copyright (c) 2009 - 2010, Alejandro Marzini (vgvgf)
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
//	* Redistributions of source code must retain the above copyright notice,
//	this list of conditions and the following disclaimer.
//	* Redistributions in binary form must reproduce the above copyright
//	notice, this list of conditions and the following disclaimer in the
//	documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
/////////////////////////////////////////////////////////////////////////////

#ifndef _AUDIO_H_
#define _AUDIO_H_

///////////////////////////////////////////////////////////
// Headers
///////////////////////////////////////////////////////////
#include <string>

///////////////////////////////////////////////////////////
/// Audio namespace.
///////////////////////////////////////////////////////////
namespace Audio {
	///////////////////////////////////////////////////////
	/// Initializes audio.
	///////////////////////////////////////////////////////
	void Init();

	///////////////////////////////////////////////////////
	/// Pauses audio playback.
	///////////////////////////////////////////////////////
	void Pause();

	///////////////////////////////////////////////////////
	/// Continue audio playback.
	///////////////////////////////////////////////////////
	void Continue();

	///////////////////////////////////////////////////////
	/// Plays a BGM.
	///////////////////////////////////////////////////////
	void BGM_Play(std::string file, int volume, int pitch);

	///////////////////////////////////////////////////////
	/// Stops the BGM.
	///////////////////////////////////////////////////////
	void BGM_Stop();

	///////////////////////////////////////////////////////
	/// Fades out the BGM and then stop it.
	///////////////////////////////////////////////////////
	void BGM_Fade(int fade);

	///////////////////////////////////////////////////////
	/// Plays a BGS.
	///////////////////////////////////////////////////////
	void BGS_Play(std::string file, int volume, int pitch);

	///////////////////////////////////////////////////////
	/// Stops the BGS.
	///////////////////////////////////////////////////////
	void BGS_Stop();

	///////////////////////////////////////////////////////
	/// Fades out the BGS and then stop it.
	///////////////////////////////////////////////////////
	void BGS_Fade(int fade);

	///////////////////////////////////////////////////////
	/// Plays a ME.
	///////////////////////////////////////////////////////
	void ME_Play(std::string file, int volume, int pitch);

	///////////////////////////////////////////////////////
	/// Stops the ME.
	///////////////////////////////////////////////////////
	void ME_Stop();

	///////////////////////////////////////////////////////
	/// Fades out the ME and then stop it.
	///////////////////////////////////////////////////////
	void ME_Fade(int fade);

	///////////////////////////////////////////////////////
	/// Plays a SE.
	///////////////////////////////////////////////////////
	void SE_Play(std::string file, int volume, int pitch);

	///////////////////////////////////////////////////////
	/// Stops all SE.
	///////////////////////////////////////////////////////
	void SE_Stop();
};

#endif
